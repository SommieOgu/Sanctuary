// MapComponent.tsx
"use client";

import { useState, useEffect } from "react";
import { MapContainer, TileLayer, Marker, Popup, useMap } from "react-leaflet";
import "leaflet/dist/leaflet.css";
import L from "leaflet";

// Fix Leaflet's missing icon issue in Next.js
delete (L.Icon.Default as any).prototype._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: require("leaflet/dist/images/marker-icon-2x.png"),
  iconUrl: require("leaflet/dist/images/marker-icon.png"),
  shadowUrl: require("leaflet/dist/images/marker-shadow.png"),
});

// Define Service interface
interface Service {
  name: string;
  type: string;
  location: string;
  contact: string;
  services: string[];
  lowCost: boolean;
  acceptsInsurance: boolean;
  hours: string;
  eligibility: string;
  lat: number;
  lng: number;
}

// Default center (fallback if geolocation fails)
const defaultCenter = [37.7749, -122.4194]; // San Francisco coords

// Custom user location icon (blue)
const userLocationIcon = new L.Icon({
  iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-blue.png',
  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
  iconSize: [25, 41],
  iconAnchor: [12, 41],
  popupAnchor: [1, -34],
  shadowSize: [41, 41]
});

// Custom service icons for different types (using different colors)
const serviceIcons = {
  default: new L.Icon({
    iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png',
    shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
    iconSize: [25, 41],
    iconAnchor: [12, 41],
    popupAnchor: [1, -34],
    shadowSize: [41, 41]
  }),
  clinic: new L.Icon({
    iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-green.png',
    shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
    iconSize: [25, 41],
    iconAnchor: [12, 41],
    popupAnchor: [1, -34],
    shadowSize: [41, 41]
  }),
  hospital: new L.Icon({
    iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-orange.png',
    shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
    iconSize: [25, 41],
    iconAnchor: [12, 41],
    popupAnchor: [1, -34],
    shadowSize: [41, 41]
  }),
  counseling: new L.Icon({
    iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-violet.png',
    shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
    iconSize: [25, 41],
    iconAnchor: [12, 41],
    popupAnchor: [1, -34],
    shadowSize: [41, 41]
  }),
  housing: new L.Icon({
    iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-gold.png',
    shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
    iconSize: [25, 41],
    iconAnchor: [12, 41],
    popupAnchor: [1, -34],
    shadowSize: [41, 41]
  })
};

// Helper function to determine which icon to use based on service type
const getServiceIcon = (service: any) => {
  if (!service || !service.type) return serviceIcons.default;
  
  const type = service.type.toLowerCase();
  
  if (type.includes('clinic') || type.includes('pop-up') || type.includes('popup')) return serviceIcons.clinic;
  if (type.includes('hospital') || type.includes('medical center')) return serviceIcons.hospital;
  if (type.includes('counseling') || type.includes('mental health') || type.includes('therapy')) return serviceIcons.counseling;
  if (type.includes('housing') || type.includes('temporary') || type.includes('residence')) return serviceIcons.housing;
  
  return serviceIcons.default;
};

// Component to focus the map on given coordinates and show message if no services
function SetViewOnServices({ services, userLocation, showNoServicesMessage }: { 
  services: any[], 
  userLocation: number[] | null,
  showNoServicesMessage: (show: boolean) => void 
}) {
  const map = useMap();
  
  useEffect(() => {
    if (services && services.length > 0) {
      try {
        // Check if all services have valid lat/lng values
        const validServices = services.filter(service => 
          service && 
          typeof service.lat === 'number' && 
          typeof service.lng === 'number' &&
          !isNaN(service.lat) && 
          !isNaN(service.lng)
        );
        
        if (validServices.length > 0) {
          // Hide the no services message
          showNoServicesMessage(false);
          
          // Create bounds to fit all valid markers
          const bounds = L.latLngBounds(
            validServices.map(service => [service.lat, service.lng])
          );
          
          // Check if bounds are valid before fitting
          if (bounds.isValid()) {
            map.fitBounds(bounds, { padding: [50, 50] });
          } else if (userLocation) {
            // Fallback to user location
            map.setView(userLocation, 13);
          }
        } else {
          // Show no services message
          showNoServicesMessage(true);
          
          if (userLocation) {
            // If no valid services but user location is available, center on user
            map.setView(userLocation, 13);
          }
        }
      } catch (error) {
        console.error("Error setting map bounds:", error);
        // Show no services message
        showNoServicesMessage(true);
        
        // Fallback to default view or user location
        if (userLocation) {
          map.setView(userLocation, 13);
        }
      }
    } else {
      // Show no services message
      showNoServicesMessage(true);
      
      if (userLocation) {
        // If no services but user location is available, center on user
        map.setView(userLocation, 13);
      }
    }
  }, [services, userLocation, map, showNoServicesMessage]);
  
  return null;
}

// Component to show user location marker
function UserLocationMarker({ position }: { position: number[] }) {
  if (position) {
    return (
      <Marker position={position} icon={userLocationIcon}>
        <Popup>Your location</Popup>
      </Marker>
    );
  }
  return null;
}

interface MapComponentProps {
  services?: any[];
  onMarkerClick?: ((service: any) => void) | null;
}

const MapComponent = ({ services = [], onMarkerClick }: MapComponentProps) => {
  const [userLocation, setUserLocation] = useState<number[] | null>(null);
  const [isLocating, setIsLocating] = useState<boolean>(true);
  const [showNoServicesMessage, setShowNoServicesMessage] = useState<boolean>(false);
  
  // Get user's location when component mounts
  useEffect(() => {
    if (navigator.geolocation) {
      setIsLocating(true);
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const { latitude, longitude } = position.coords;
          setUserLocation([latitude, longitude]);
          setIsLocating(false);
        },
        (error) => {
          console.error("Error getting location:", error.message);
          setIsLocating(false);
        },
        { enableHighAccuracy: true, timeout: 5000, maximumAge: 0 }
      );
    } else {
      console.log("Geolocation is not supported by this browser.");
      setIsLocating(false);
    }
  }, []);

  // Define map options
  const mapOptions = {
    dragging: false,  // Disable panning
    zoomControl: true, // Keep zoom controls
    scrollWheelZoom: true, // Allow zooming with scroll wheel
    doubleClickZoom: true // Allow zooming with double click
  };

  // If still getting location, show loading indicator
  if (isLocating) {
    return <div style={{ height: "400px", display: "flex", justifyContent: "center", alignItems: "center" }}>
      Locating your position...
    </div>;
  }
  
  return (
    <div>
      {showNoServicesMessage && (
        <div style={{
          padding: '10px',
          marginBottom: '10px',
          backgroundColor: '#fff3cd',
          color: '#856404',
          borderRadius: '4px',
          textAlign: 'center'
        }}>
          No services found near your location. Try broadening your search criteria.
        </div>
      )}
      
      <MapContainer 
        center={userLocation || defaultCenter as [number, number]} 
        zoom={13} 
        style={{ height: "400px", width: "100%" }}
        {...mapOptions}
      >
        <TileLayer
          attribution='&copy; <a href="https://openstreetmap.org">OpenStreetMap</a>'
          url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
        />
        
        {/* User location marker */}
        {userLocation && <UserLocationMarker position={userLocation} />}
        
        {/* Render markers for each service */}
        {services && services.length > 0 && services.map((service: any, index: number) => {
          // Check if service has valid lat/lng
          if (service && typeof service.lat === 'number' && typeof service.lng === 'number' && !isNaN(service.lat) && !isNaN(service.lng)) {
            return (
              <Marker 
                key={index} 
                position={[service.lat, service.lng]}
                icon={getServiceIcon(service)}
                eventHandlers={{
                  click: () => onMarkerClick && onMarkerClick(service)
                }}
              >
                <Popup>
                  <div>
                    <h3>{service.name || 'Unnamed Service'}</h3>
                    <p>{service.type || 'Type not specified'}</p>
                    <p>{service.location || 'Location not specified'}</p>
                    <p><strong>Contact:</strong> {service.contact || 'Not available'}</p>
                    {service.hours && <p><strong>Hours:</strong> {service.hours}</p>}
                    {service.lowCost !== undefined && 
                      <p><strong>Low Cost:</strong> {service.lowCost ? 'Yes' : 'No'}</p>}
                    {service.acceptsInsurance !== undefined && 
                      <p><strong>Accepts Insurance:</strong> {service.acceptsInsurance ? 'Yes' : 'No'}</p>}
                  </div>
                </Popup>
              </Marker>
            );
          }
          return null; // Skip invalid services
        })}
        
        {/* Component to focus map on services or user location */}
        <SetViewOnServices 
          services={services} 
          userLocation={userLocation} 
          showNoServicesMessage={setShowNoServicesMessage}
        />
      </MapContainer>
    </div>
  );
};

export default MapComponent;
